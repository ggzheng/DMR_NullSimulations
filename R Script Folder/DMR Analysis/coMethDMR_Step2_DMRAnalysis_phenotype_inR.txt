
################################################################
################################################################
##### About GSE56046 450K Data
################################################################
################################################################

################################################################
##### data is publicly available at  
##### https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE56046
################################################################

##### we saved the covariate data as:
##### cov_GSE56046.txt 

##### we saved the methylation data (M-values) as:
##### GSE56046_methy_normalized.txt

##### assume you have simulated null phenotypes and saved it as
##### paste0("DMR_SimulatedData_450K_",nbatch,"batch_", nimput,".Rdata")

##### annotation files are available at 
##### https://support.illumina.com/array/array_kits/infinium-methylationepic-beadchip-kit/downloads.html
##### we also provided annotation files for 450K and EPIC arrays for downloading directly:
##### EPIC: MethylationEPIC_v_1_0_B4.csv
##### 450K: HumanMethylation450_15017482_v1_2.csv


################################################################
################################################################
##### Prepare for Cluster Submission
################################################################
################################################################

##### NOTE, this might be varying between different clusters
##### Update code below compatible your cluster for batch submission in job array

################################################################
# Set up parallel backend with seed
################################################################

##### to speed up simulations we used parallel computing for coMethDMR

#library(doSNOW)
#library(plyr)

library(doParallel)
library(foreach)

detectCores() # number of cores

number_cores <- 8
cl<-makeCluster(number_cores)
registerDoParallel(cl)

number_cores
getDoParWorkers()

#set seed - Do Not Forget This
clusterSetRNGStream(cl, iseed = 9251)

################################################################
##### Set Job ID for job array
################################################################

##### Each jobid is associated with one of two region types analyzed in coMethDMR: "Gene","InterGene"
##### possible jobid values: 1 and 2

jobid <-  as.numeric(Sys.getenv("SGE_TASK_ID"))
cat("Starting run job id = ", jobid ,"\n")


################################################################
################################################################
##### Prepare Data for Simulations
################################################################
################################################################

################################################################
##### Set # of imputations  
##### batch = 8 (96 subjects)
################################################################

nimput <- 1000; nbatch <- 8; 

phenotype_pick_list <- c("phenocont", "phenocontsk", "phenobinary", "phenobinarysk")
#phenotype_pick_id <- 1, 2, 3,4
#in this example, we set it to be phenocont

phenotype_pick_id <- 1
phenotype_pick <- phenotype_pick_list[phenotype_pick_id]
phenotype_pick

#you can set the seed as needed like below if you don't use parallel computing
#seedid <- 4872 + nimput*10 + nbatch*100 + jobid*2663 + phenotype_pick_id 
#seedid
#set.seed(seedid)

################################################################
##### library  
################################################################
library(limma)
library(qqman)
library(lme4)

#The latest version of coMethDMR can be installed by
#library(devtools)
#install_github ("lissettegomez/coMethDMR")

#NOTE: coMethDMR uses IlluminaHumanMethylationEPICanno.ilm10b2
library(coMethDMR)
library(data.table)

################################################################
##### picked id + simulated phenotypes
################################################################

inputfile=paste0("DMR_SimulatedData_450K_",nbatch,"batch_", nimput,".Rdata")
load(inputfile) #gives: phenotype_all

#names(phenotype_all)
#dim(phenotype_all)  

phenotype_all$id <- as.character(phenotype_all$id)

simulated_phenotype <- phenotype_all

################################################################
##### covariates
##### note you might need to modify your code depending how you prepare GSE56046 data
################################################################

cov <- read.csv("cov_GSE56046.txt", sep = "\t", header = F, stringsAsFactor=FALSE)

names(cov) <- c("ID", "ChipID", "WellID", "age", "site", "Bcell", "Tcell", "NK", "Neutro")
#dim(cov) 

cov2 <- cov[cov$ID%in%phenotype_all$id,]
#dim(co2v) 

#check missingness
summary(cov2)

################################################################
##### beta data - NOTE: those are already M values!
##### CoMethDMR needs methylation M value in model, but the input are beta values
##### So we need to transfer M values back to original value
##### Ref: https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-11-587
##### /restricted/projectnb/ptsd/yzheng/DMR/anno
##### 450K annotation: HumanMethylation450_15017482_v1_2.csv  
##### EPIC annotation: MethylationEPIC_v_1_0_B4.csv
##### note you might need to modify your code depending how you prepare GSE56046 data
################################################################

beta <- fread("GSE56046_methylome_normalized.txt")
dim(beta) 

beta_Mvalues <- grep(pattern = 'Mvalue', x = names(beta), value=TRUE)
beta2 <- beta[, beta_Mvalues, with=FALSE]
dim(beta2) 
names(beta2) <- cov$ID
beta2 <- as.data.frame(beta2)

beta3 <- beta2[, phenotype_all$id]
dim(beta3) 
row.names(beta3) <- beta$ID_REF

#sum(is.na(beta3))   

##### remove X/Y probes - you can keep them as you prefer
##### if applying to EPIC data, switch to EPIC annotation: MethylationEPIC_v_1_0_B4.csv
################################################################
anno <- read.csv("HumanMethylation450_15017482_v1_2.csv",skip=7,stringsAsFactors=FALSE)

cg_exclude <- anno[anno$CHR%in%c("X","Y"),]$Name

beta4 <- beta3[!rownames(beta3)%in%cg_exclude,]
dim(beta4)  

##### convert M to beta - NEED THIS for coMethDMR!
##### otherwise, the package would produce NaNs to cause code to stop
################################################################
beta5 <-2^beta4/(2^beta4+1) # log transforming back
dim(beta5)  

################################################################
##### scale all continuous variables
################################################################

pheno<-cov2
rownames(pheno) <- pheno$ID
pheno$site <- as.factor(pheno$site)
pheno$sampID <- pheno$ID

betaP <- beta5[,names(beta5)%in%pheno$ID]
dim(betaP)

# DO NOT FORGET THIS!!
pheno <- pheno[order(row.names(pheno)),]
betaP <- betaP[,order(colnames(betaP))]

all(rownames(pheno)==colnames(betaP)) ##Should be all TRUE

dim(betaP)
dim(pheno) 

#covariates
scale_var <- c("age","Bcell","Tcell","NK","Neutro")
pheno[, scale_var] <-scale(pheno[, scale_var])

is.data.frame(betaP) #TRUE
is.data.frame(pheno) #TRUE


################################################################
################################################################
##### Apply CoMethDMR
################################################################
################################################################

################################################################
##### CoMethDRM requires a variable Sample in the dataset
################################################################

pheno$Sample<-pheno$sampID

pheno_org <- pheno
betaP_org <- betaP

################################################################
##### Pick the subregion
################################################################

regions_list <- c("Gene","InterGene")

k<-jobid

vark=regions_list[k]
print(paste0("current k = ", k, " for ", vark))

infilename=paste0("coMethDMR_prepdata_",vark,".RData")  ## from Step1

print(paste0("load: ", infilename))

load(infilename)

#gives: coMeth_ls 

####################################################################################
# parallel computing
####################################################################################

#note, this Sys.time() function might vary between clusters
#time_start <- Sys.time() 
#paste0("Time start: ", Sys.time())

out_df_all <- foreach(i=1:nimput, .combine=rbind, .packages = c("coMethDMR")) %dopar%{

print(paste0("current starts: i = ", i))

####merge simulated phenotype 
##########################################################################
keeptemp <- c("id", paste0(phenotype_pick,i))
phenotemp <- simulated_phenotype[, keeptemp]
names(phenotemp)<-c("Sample","phenotype")

pheno <- merge(pheno_org, phenotemp, by="Sample")
pheno$phenotype <- as.numeric(pheno$phenotype)

row.names(pheno)<-pheno$sampID
#dim(pheno)
#head(pheno)

# DO NOT FORGET THIS!!
pheno <- pheno[order(row.names(pheno)),]
#betaP <- betaP[,order(colnames(betaP))]

paste0("Should be all TRUE: ", all(rownames(pheno)==colnames(betaP)))
if(!(all(rownames(pheno)==colnames(betaP)))){break} ##Should be all TRUE

##run CoMethDMR
##########################################################################

out_df <- lmmTestAllRegions(
betas = betaP,
 region_ls = coMeth_ls,
 pheno_df = pheno,
 contPheno_char = "phenotype",
 covariates_char = c("age","site","Bcell","Tcell","NK","Neutro"),
 modelType = "randCoef",
 arrayType = "450k"   #change "450k_" to "EPIC_" for EPIC array data
)

#annotate
out_df_anno <- AnnotateResults(
  lmmRes_df = out_df,
  arrayType = "450k"   #change "450k_" to "EPIC_" for EPIC array data
)
#head(out_df_anno)

#name it back 
out_df <-out_df_anno[order(out_df_anno$pValue),]
out_df$region<-vark
out_df$model<-"randCoef"
out_df$simulation<-i

####output
##########################################################################
out_df_temp <-out_df

}

warnings()

####Output simulation results
##########################################################################
outputfile=paste0("CoMethDMR_",phenotype_pick,"_b",nbatch,"n",nimput,"_",vark,".Rdata")

print(paste0("saved as: ", outputfile))

save(out_df_all, file=outputfile)


#time_end <- Sys.time()
#paste0("Time end: ", Sys.time())

#Check running time;
#time_end-time_start

#stopCluster(cl)




